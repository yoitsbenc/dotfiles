alias cd.="cd .."
alias cd2.="cd ../.."
alias cd3.="cd ../../.."
alias cd4.="cd ../../../.."
alias cd5.="cd ../../../../.."
alias cd6.="cd ../../../../../.."

alias ll='ls -halF'
alias la='ls -A'
alias l='ls -CF'

tmux_public() {
  if [ -n "$TMUX" ]; then
    tmux_filepath=${TMUX%%,*}
    chmod 777 $tmux_filepath
  else
    echo "You must run this command from within a tmux session"
  fi
}

tmux_secure() {
  if [ -n "$1" ]; then
    chmod 700 /tmp/$1
    echo "Set session to be private ($1)"
  else
    echo "Please specify the name of a tmux to secure"
  fi
}

tmux_start () {
  if [ -n "$1" ]; then
    tmux -S /tmp/$1 new-session -s $1 -d
    tmux_secure $1

    tmux -S /tmp/$1 attach -t $1

    # After detaching/exiting from the tmux
    # Check if the session is still active to decide whether to clean or secure
    if ps -o ruser,command -ax | grep -q "[n]ew-session -s $1" ; then
      tmux_secure $1
    else
      rm /tmp/$1
      echo "Deleted unused session ($1)"
    fi
  else
    echo "Please specify the name of a tmux to start"
  fi
}

tmux_list () {
  ps -o ruser,command -ax | grep '[n]ew-session -s' | ruby -ne '$_ =~ /^(\w+).*-s (\w+)/; puts "#{$1} started #{$2}"'
}

# python-kinds gets import jumping working correctly on macs
alias ctagme='ctags -R --exclude="*.js" --python-kinds=-i'

alias tmux-start='tmux_start'
alias tmuxs='tmux_start'
alias tmux-list='tmux_list'
alias tmuxl='tmux_list'
alias tmux-public='tmux_public'
alias tmuxpub='tmux_public'

alias treep='tree -I "*.pyc"'

alias bmux-start="echo 'DEPRECATED: SWITCH TO tmux-start' && tmux_start"
alias bmuxs="echo 'DEPRECATED: SWITCH TO tmuxs' && tmux_start"
alias bmux-list="echo 'DEPRECATED: SWITCH TO tmux-list' && tmux_list"
alias bmuxl="echo 'DEPRECATED:SWTICH TO tmuxl' && tmux_list"
alias k="kubectl"
alias kns="kubens"

alias ghlinkbranch='git branch --set-upstream-to=origin/$(git branch --show-current) $(git branch --show-current)'
bump-the-branch (){
    branch_name=$(git rev-parse --abbrev-ref HEAD)
    if [[ "$branch_name" == "main" ]] || [[ "$branch_name" == "master" ]]; then
      echo "Cannot use on main branch"
    else
      git commit --allow-empty -m "empty commit to bump the branch"
      git push origin HEAD
    fi
}

alias dps='docker ps --format "table {{.ID}} {{.CreatedAt}} {{.Names}} 	{{.Image}}	{{.Status}}"'
alias doc=docker-compose
alias docker-stop='docker ps -aq | xargs docker stop'

alias pyenvme='pyenv shell $(basename $PWD)'

alias pod-get="kubectl get pods | grep "
alias pr-open="gh pr view --web"

function pod-shell() {
  pod_id=$1

  kubectl exec -it $pod_id -- ./docker-entrypoint.sh bash
}

function nextapp() {
  list_file=~/.team-apps

  current_app=`basename $PWD`

  if ! grep -q $current_app $list_file ; then
    echo "$current_app is not an app"
    return
  fi

  first_app="0"

  next_app=`grep -A 1 $current_app $list_file | tail -n 1`

  if [[ "$next_app" == "$current_app" ]]; then
    next_app=`head -n 1 $list_file`
  fi

  echo "Old: $current_app"
  echo "New: $next_app"

  cd ~/so/$next_app
}

function previousapp() {
  list_file=~/.team-apps

  current_app=`basename $PWD`

  if ! grep -q $current_app $list_file ; then
    echo "$current_app is not an app"
    return
  fi

  first_app="0"

  next_app=`grep -B 1 $current_app $list_file | head -n 1`

  if [[ "$next_app" == "$current_app" ]]; then
    next_app=`tail -n 1 $list_file`
  fi

  echo "Old: $current_app"
  echo "New: $next_app"

  cd ~/so/$next_app
}
alias n=nextapp
alias p=previousapp

function dports() {
  docker ps --format "{{.Names | printf \"%-60s\" }}{{.Ports}}" | sed "s/`basename $PWD`_//g"
}
